version: "{build}"
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
    - master
skip_branch_with_pr: true
image:
  - Ubuntu1604
  - macos-mojave
  - Visual Studio 2019
environment:
  ApiKey:
    secure: F+Q6kHqg+DlND/2yeIt5bXJC5GJ0ZRufxxdwQRkcPT8=
  Timeout: 10
  LinuxJob: "Image: Ubuntu1604"
  MacJob: "Image: macos-mojave"
for:
  - matrix:
      only:
        - image: Ubuntu1604
    build_script:
      - sh: |
          set -e
          mkdir build
          pushd build
          cmake ..
          make clean
          make
          appveyor PushArtifact ./lib/linux-x64/libthot.so
          popd
    test_script:
      - sh: |
          ./build/tests/thot_test --gtest_output=xml:./build/test-results.xml
          curl -F 'file=@./build/test-results.xml' https://ci.appveyor.com/api/testresults/junit/$APPVEYOR_JOB_ID
  - matrix:
      only:
        - image: macos-mojave
    install:
      - sh: brew install libomp
    build_script:
      - sh: |
          set -e
          mkdir build
          pushd build
          cmake ..
          make clean
          make
          install_name_tool -add_rpath /opt/local/lib/libomp ./lib/osx-x64/libthot.dylib
          install_name_tool -add_rpath /usr/local/opt/libomp/lib ./lib/osx-x64/libthot.dylib
          install_name_tool -change /usr/local/opt/libomp/lib/libomp.dylib @rpath/libomp.dylib ./lib/osx-x64/libthot.dylib
          appveyor PushArtifact ./lib/osx-x64/libthot.dylib
          popd
    test_script:
      - sh: |
          ./build/tests/thot_test --gtest_output=xml:./build/test-results.xml
          curl -F 'file=@./build/test-results.xml' https://ci.appveyor.com/api/testresults/junit/$APPVEYOR_JOB_ID
  - matrix:
      only:
        - image: Visual Studio 2019
    build_script:
      - ps: |
          mkdir build
          pushd build
          cmake .. -A x64
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          cmake --build . --config Release
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          Remove-Item CMakeFiles -Force -Recurse -ErrorAction SilentlyContinue
          Remove-Item CMakeCache.txt
          Remove-Item _deps -Force -Recurse -ErrorAction SilentlyContinue
          cmake .. -A win32
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          cmake --build . --config Release
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          popd

          Write-Host "Waiting for job `"$env:LinuxJob`" to complete"

          $headers =
          @{
              "Authorization" = "Bearer $env:ApiKey"
              "Content-type" = "application/json"
          }

          [datetime]$stop = ([datetime]::Now).AddMinutes($env:Timeout)
          [bool]$success = $false

          while (!$success -and ([datetime]::Now) -lt $stop)
          {
              $project = Invoke-RestMethod -Uri "https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG" -Headers $headers -Method GET

              $linuxJobJson = $project.build.jobs | where {$_.name -eq $env:LinuxJob}  
              $success = $linuxJobJson.status -eq "success"
              $linuxJobId = $linuxJobJson.jobId;
              if (!$success) { Start-sleep 5 }
          }

          if (!$success) { throw "Job `"$env:LinuxJob`" was not finished in $env:Timeout minutes" }
          if (!$linuxJobId) { throw "Unable to get JobId for the job `"$env:LinuxJob`"" }

          New-Item -ItemType Directory -Force -Path build\lib\linux-x64
          Start-FileDownload https://ci.appveyor.com/api/buildjobs/$linuxJobId/artifacts/libthot.so -FileName build\lib\linux-x64\libthot.so
          Write-Host "Retrieved `"$env:LinuxJob`" artifacts"

          Write-Host "Waiting for job `"$env:MacJob`" to complete"

          $stop = ([datetime]::Now).AddMinutes($env:Timeout)
          $success = $false

          while (!$success -and ([datetime]::Now) -lt $stop)
          {
              $project = Invoke-RestMethod -Uri "https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG" -Headers $headers -Method GET

              $macJobJson = $project.build.jobs | where {$_.name -eq $env:MacJob}  
              $success = $macJobJson.status -eq "success"
              $macJobId = $macJobJson.jobId;
              if (!$success) { Start-sleep 5 }
          }

          if (!$success) { throw "Job `"$env:MacJob`" was not finished in $env:Timeout minutes" }
          if (!$macJobId) { throw "Unable to get JobId for the job `"$env:MacJob`"" }

          New-Item -ItemType Directory -Force -Path build\lib\osx-x64
          Start-FileDownload https://ci.appveyor.com/api/buildjobs/$macJobId/artifacts/libthot.dylib -FileName build\lib\osx-x64\libthot.dylib
          Write-Host "Retrieved `"$env:MacJob`" artifacts"
    test_script:
      - ps: |
          .\build\tests\Release\thot_test --gtest_output=xml:.\build\test-results.xml
          $wc = New-Object 'System.Net.WebClient'
          $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\build\test-results.xml))
    deploy_script:
      - ps: |
          if ($env:APPVEYOR_REPO_TAG -eq "true")
          {
              nuget pack nuget\Thot.nuspec -Properties Configuration=Release -BasePath nuget -OutputDirectory artifacts
              nuget push artifacts\*.nupkg -NoSymbols -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json
          }
test: off
